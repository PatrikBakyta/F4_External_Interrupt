
C:\Users\Patrik Bakyta\Documents\GitHub\VRS\F4_External_Interrupt\Debug\F4_External_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000828  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080009b0  080009b8  000109b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080009b0  080009b0  000109b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009b4  080009b4  000109b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  20000000  20000000  000109b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  000109b8  2**0
                  CONTENTS
  7 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  2000001c  2000001c  00020000  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000109b8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00002c0e  00000000  00000000  000109e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000aca  00000000  00000000  000135f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000003d8  00000000  00000000  000140c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000350  00000000  00000000  00014498  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000168b  00000000  00000000  000147e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00001874  00000000  00000000  00015e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000176e7  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e94  00000000  00000000  00017768  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000185fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000998 	.word	0x08000998

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000998 	.word	0x08000998

080001c8 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80001d0:	2300      	movs	r3, #0
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	2300      	movs	r3, #0
 80001d6:	73bb      	strb	r3, [r7, #14]
 80001d8:	230f      	movs	r3, #15
 80001da:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80001dc:	687b      	ldr	r3, [r7, #4]
 80001de:	78db      	ldrb	r3, [r3, #3]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d038      	beq.n	8000256 <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80001e4:	4b27      	ldr	r3, [pc, #156]	; (8000284 <NVIC_Init+0xbc>)
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	43db      	mvns	r3, r3
 80001ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80001ee:	0a1b      	lsrs	r3, r3, #8
 80001f0:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80001f2:	7bfb      	ldrb	r3, [r7, #15]
 80001f4:	f1c3 0304 	rsb	r3, r3, #4
 80001f8:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80001fa:	7b7a      	ldrb	r2, [r7, #13]
 80001fc:	7bfb      	ldrb	r3, [r7, #15]
 80001fe:	fa42 f303 	asr.w	r3, r2, r3
 8000202:	737b      	strb	r3, [r7, #13]

    tmppriority = NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	785b      	ldrb	r3, [r3, #1]
 8000208:	461a      	mov	r2, r3
 800020a:	7bbb      	ldrb	r3, [r7, #14]
 800020c:	fa02 f303 	lsl.w	r3, r2, r3
 8000210:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 8000212:	687b      	ldr	r3, [r7, #4]
 8000214:	789a      	ldrb	r2, [r3, #2]
 8000216:	7b7b      	ldrb	r3, [r7, #13]
 8000218:	4013      	ands	r3, r2
 800021a:	b2da      	uxtb	r2, r3
 800021c:	7bfb      	ldrb	r3, [r7, #15]
 800021e:	4313      	orrs	r3, r2
 8000220:	73fb      	strb	r3, [r7, #15]
        
    tmppriority = tmppriority << 0x04;
 8000222:	7bfb      	ldrb	r3, [r7, #15]
 8000224:	011b      	lsls	r3, r3, #4
 8000226:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000228:	4a17      	ldr	r2, [pc, #92]	; (8000288 <NVIC_Init+0xc0>)
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	781b      	ldrb	r3, [r3, #0]
 800022e:	4413      	add	r3, r2
 8000230:	7bfa      	ldrb	r2, [r7, #15]
 8000232:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000236:	4a14      	ldr	r2, [pc, #80]	; (8000288 <NVIC_Init+0xc0>)
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	095b      	lsrs	r3, r3, #5
 800023e:	b2db      	uxtb	r3, r3
 8000240:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	f003 031f 	and.w	r3, r3, #31
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000250:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000254:	e00f      	b.n	8000276 <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000256:	490c      	ldr	r1, [pc, #48]	; (8000288 <NVIC_Init+0xc0>)
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	095b      	lsrs	r3, r3, #5
 800025e:	b2db      	uxtb	r3, r3
 8000260:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	f003 031f 	and.w	r3, r3, #31
 800026a:	2201      	movs	r2, #1
 800026c:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800026e:	f100 0320 	add.w	r3, r0, #32
 8000272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000276:	bf00      	nop
 8000278:	3714      	adds	r7, #20
 800027a:	46bd      	mov	sp, r7
 800027c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000280:	4770      	bx	lr
 8000282:	bf00      	nop
 8000284:	e000ed00 	.word	0xe000ed00
 8000288:	e000e100 	.word	0xe000e100

0800028c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000294:	2300      	movs	r3, #0
 8000296:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8000298:	4b34      	ldr	r3, [pc, #208]	; (800036c <EXTI_Init+0xe0>)
 800029a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	799b      	ldrb	r3, [r3, #6]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d04f      	beq.n	8000344 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002a4:	4931      	ldr	r1, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a6:	4b31      	ldr	r3, [pc, #196]	; (800036c <EXTI_Init+0xe0>)
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	43db      	mvns	r3, r3
 80002b0:	4013      	ands	r3, r2
 80002b2:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002b4:	492d      	ldr	r1, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b6:	4b2d      	ldr	r3, [pc, #180]	; (800036c <EXTI_Init+0xe0>)
 80002b8:	685a      	ldr	r2, [r3, #4]
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	43db      	mvns	r3, r3
 80002c0:	4013      	ands	r3, r2
 80002c2:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	791b      	ldrb	r3, [r3, #4]
 80002c8:	461a      	mov	r2, r3
 80002ca:	68fb      	ldr	r3, [r7, #12]
 80002cc:	4413      	add	r3, r2
 80002ce:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	68fa      	ldr	r2, [r7, #12]
 80002d4:	6811      	ldr	r1, [r2, #0]
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	6812      	ldr	r2, [r2, #0]
 80002da:	430a      	orrs	r2, r1
 80002dc:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002de:	4923      	ldr	r1, [pc, #140]	; (800036c <EXTI_Init+0xe0>)
 80002e0:	4b22      	ldr	r3, [pc, #136]	; (800036c <EXTI_Init+0xe0>)
 80002e2:	689a      	ldr	r2, [r3, #8]
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	43db      	mvns	r3, r3
 80002ea:	4013      	ands	r3, r2
 80002ec:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 80002ee:	491f      	ldr	r1, [pc, #124]	; (800036c <EXTI_Init+0xe0>)
 80002f0:	4b1e      	ldr	r3, [pc, #120]	; (800036c <EXTI_Init+0xe0>)
 80002f2:	68da      	ldr	r2, [r3, #12]
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	43db      	mvns	r3, r3
 80002fa:	4013      	ands	r3, r2
 80002fc:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	795b      	ldrb	r3, [r3, #5]
 8000302:	2b10      	cmp	r3, #16
 8000304:	d10e      	bne.n	8000324 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 8000306:	4919      	ldr	r1, [pc, #100]	; (800036c <EXTI_Init+0xe0>)
 8000308:	4b18      	ldr	r3, [pc, #96]	; (800036c <EXTI_Init+0xe0>)
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4313      	orrs	r3, r2
 8000312:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000314:	4915      	ldr	r1, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000316:	4b15      	ldr	r3, [pc, #84]	; (800036c <EXTI_Init+0xe0>)
 8000318:	68da      	ldr	r2, [r3, #12]
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4313      	orrs	r3, r2
 8000320:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000322:	e01d      	b.n	8000360 <EXTI_Init+0xd4>
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
    }
    else
    {
      tmp = (uint32_t)EXTI_BASE;
 8000324:	4b11      	ldr	r3, [pc, #68]	; (800036c <EXTI_Init+0xe0>)
 8000326:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	461a      	mov	r2, r3
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	4413      	add	r3, r2
 8000332:	60fb      	str	r3, [r7, #12]

      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000334:	68fb      	ldr	r3, [r7, #12]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	6811      	ldr	r1, [r2, #0]
 800033a:	687a      	ldr	r2, [r7, #4]
 800033c:	6812      	ldr	r2, [r2, #0]
 800033e:	430a      	orrs	r2, r1
 8000340:	601a      	str	r2, [r3, #0]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000342:	e00d      	b.n	8000360 <EXTI_Init+0xd4>
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
    }
  }
  else
  {
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	791b      	ldrb	r3, [r3, #4]
 8000348:	461a      	mov	r2, r3
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	4413      	add	r3, r2
 800034e:	60fb      	str	r3, [r7, #12]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	68fa      	ldr	r2, [r7, #12]
 8000354:	6811      	ldr	r1, [r2, #0]
 8000356:	687a      	ldr	r2, [r7, #4]
 8000358:	6812      	ldr	r2, [r2, #0]
 800035a:	43d2      	mvns	r2, r2
 800035c:	400a      	ands	r2, r1
 800035e:	601a      	str	r2, [r3, #0]
  }
}
 8000360:	bf00      	nop
 8000362:	3714      	adds	r7, #20
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr
 800036c:	40013c00 	.word	0x40013c00

08000370 <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *          This parameter can be EXTI_Linex where x can be(0..22)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000370:	b480      	push	{r7}
 8000372:	b085      	sub	sp, #20
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800037c:	2300      	movs	r3, #0
 800037e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000380:	4b0c      	ldr	r3, [pc, #48]	; (80003b4 <EXTI_GetITStatus+0x44>)
 8000382:	681a      	ldr	r2, [r3, #0]
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	4013      	ands	r3, r2
 8000388:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800038a:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <EXTI_GetITStatus+0x44>)
 800038c:	695a      	ldr	r2, [r3, #20]
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4013      	ands	r3, r2
 8000392:	2b00      	cmp	r3, #0
 8000394:	d005      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d002      	beq.n	80003a2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800039c:	2301      	movs	r3, #1
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e001      	b.n	80003a6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 80003a2:	2300      	movs	r3, #0
 80003a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80003a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80003a8:	4618      	mov	r0, r3
 80003aa:	3714      	adds	r7, #20
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40013c00 	.word	0x40013c00

080003b8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003c0:	4a04      	ldr	r2, [pc, #16]	; (80003d4 <EXTI_ClearITPendingBit+0x1c>)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	6153      	str	r3, [r2, #20]
}
 80003c6:	bf00      	nop
 80003c8:	370c      	adds	r7, #12
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	40013c00 	.word	0x40013c00

080003d8 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003d8:	b480      	push	{r7}
 80003da:	b087      	sub	sp, #28
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003e2:	2300      	movs	r3, #0
 80003e4:	617b      	str	r3, [r7, #20]
 80003e6:	2300      	movs	r3, #0
 80003e8:	613b      	str	r3, [r7, #16]
 80003ea:	2300      	movs	r3, #0
 80003ec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003ee:	2300      	movs	r3, #0
 80003f0:	617b      	str	r3, [r7, #20]
 80003f2:	e076      	b.n	80004e2 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003f4:	2201      	movs	r2, #1
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	fa02 f303 	lsl.w	r3, r2, r3
 80003fc:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	681a      	ldr	r2, [r3, #0]
 8000402:	693b      	ldr	r3, [r7, #16]
 8000404:	4013      	ands	r3, r2
 8000406:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000408:	68fa      	ldr	r2, [r7, #12]
 800040a:	693b      	ldr	r3, [r7, #16]
 800040c:	429a      	cmp	r2, r3
 800040e:	d165      	bne.n	80004dc <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681a      	ldr	r2, [r3, #0]
 8000414:	697b      	ldr	r3, [r7, #20]
 8000416:	005b      	lsls	r3, r3, #1
 8000418:	2103      	movs	r1, #3
 800041a:	fa01 f303 	lsl.w	r3, r1, r3
 800041e:	43db      	mvns	r3, r3
 8000420:	401a      	ands	r2, r3
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	681a      	ldr	r2, [r3, #0]
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	4619      	mov	r1, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	005b      	lsls	r3, r3, #1
 8000434:	fa01 f303 	lsl.w	r3, r1, r3
 8000438:	431a      	orrs	r2, r3
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	2b01      	cmp	r3, #1
 8000444:	d003      	beq.n	800044e <GPIO_Init+0x76>
 8000446:	683b      	ldr	r3, [r7, #0]
 8000448:	791b      	ldrb	r3, [r3, #4]
 800044a:	2b02      	cmp	r3, #2
 800044c:	d12e      	bne.n	80004ac <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	689a      	ldr	r2, [r3, #8]
 8000452:	697b      	ldr	r3, [r7, #20]
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	2103      	movs	r1, #3
 8000458:	fa01 f303 	lsl.w	r3, r1, r3
 800045c:	43db      	mvns	r3, r3
 800045e:	401a      	ands	r2, r3
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	683b      	ldr	r3, [r7, #0]
 800046a:	795b      	ldrb	r3, [r3, #5]
 800046c:	4619      	mov	r1, r3
 800046e:	697b      	ldr	r3, [r7, #20]
 8000470:	005b      	lsls	r3, r3, #1
 8000472:	fa01 f303 	lsl.w	r3, r1, r3
 8000476:	431a      	orrs	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	685a      	ldr	r2, [r3, #4]
 8000480:	697b      	ldr	r3, [r7, #20]
 8000482:	b29b      	uxth	r3, r3
 8000484:	2101      	movs	r1, #1
 8000486:	fa01 f303 	lsl.w	r3, r1, r3
 800048a:	43db      	mvns	r3, r3
 800048c:	401a      	ands	r2, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	685a      	ldr	r2, [r3, #4]
 8000496:	683b      	ldr	r3, [r7, #0]
 8000498:	799b      	ldrb	r3, [r3, #6]
 800049a:	4619      	mov	r1, r3
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	fa01 f303 	lsl.w	r3, r1, r3
 80004a4:	b29b      	uxth	r3, r3
 80004a6:	431a      	orrs	r2, r3
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	68da      	ldr	r2, [r3, #12]
 80004b0:	697b      	ldr	r3, [r7, #20]
 80004b2:	b29b      	uxth	r3, r3
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	2103      	movs	r1, #3
 80004b8:	fa01 f303 	lsl.w	r3, r1, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	401a      	ands	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	68da      	ldr	r2, [r3, #12]
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	79db      	ldrb	r3, [r3, #7]
 80004cc:	4619      	mov	r1, r3
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	005b      	lsls	r3, r3, #1
 80004d2:	fa01 f303 	lsl.w	r3, r1, r3
 80004d6:	431a      	orrs	r2, r3
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004dc:	697b      	ldr	r3, [r7, #20]
 80004de:	3301      	adds	r3, #1
 80004e0:	617b      	str	r3, [r7, #20]
 80004e2:	697b      	ldr	r3, [r7, #20]
 80004e4:	2b0f      	cmp	r3, #15
 80004e6:	d985      	bls.n	80003f4 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80004e8:	bf00      	nop
 80004ea:	371c      	adds	r7, #28
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr

080004f4 <GPIO_ToggleBits>:
  *                STM32F40xx/41xx and STM32F427x/437x devices.  
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
 80004fc:	460b      	mov	r3, r1
 80004fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR ^= GPIO_Pin;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	695a      	ldr	r2, [r3, #20]
 8000504:	887b      	ldrh	r3, [r7, #2]
 8000506:	405a      	eors	r2, r3
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	615a      	str	r2, [r3, #20]
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000518:	b480      	push	{r7}
 800051a:	b083      	sub	sp, #12
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2b00      	cmp	r3, #0
 8000528:	d006      	beq.n	8000538 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 800052a:	490a      	ldr	r1, [pc, #40]	; (8000554 <RCC_AHB1PeriphClockCmd+0x3c>)
 800052c:	4b09      	ldr	r3, [pc, #36]	; (8000554 <RCC_AHB1PeriphClockCmd+0x3c>)
 800052e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	4313      	orrs	r3, r2
 8000534:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000536:	e006      	b.n	8000546 <RCC_AHB1PeriphClockCmd+0x2e>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <RCC_AHB1PeriphClockCmd+0x3c>)
 800053a:	4b06      	ldr	r3, [pc, #24]	; (8000554 <RCC_AHB1PeriphClockCmd+0x3c>)
 800053c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	43db      	mvns	r3, r3
 8000542:	4013      	ands	r3, r2
 8000544:	630b      	str	r3, [r1, #48]	; 0x30
  }
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	40023800 	.word	0x40023800

08000558 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
 8000560:	460b      	mov	r3, r1
 8000562:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000564:	78fb      	ldrb	r3, [r7, #3]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d006      	beq.n	8000578 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800056a:	490a      	ldr	r1, [pc, #40]	; (8000594 <RCC_APB2PeriphClockCmd+0x3c>)
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <RCC_APB2PeriphClockCmd+0x3c>)
 800056e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	4313      	orrs	r3, r2
 8000574:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000576:	e006      	b.n	8000586 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000578:	4906      	ldr	r1, [pc, #24]	; (8000594 <RCC_APB2PeriphClockCmd+0x3c>)
 800057a:	4b06      	ldr	r3, [pc, #24]	; (8000594 <RCC_APB2PeriphClockCmd+0x3c>)
 800057c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	43db      	mvns	r3, r3
 8000582:	4013      	ands	r3, r2
 8000584:	644b      	str	r3, [r1, #68]	; 0x44
  }
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800

08000598 <SYSCFG_EXTILineConfig>:
  *           and STM32F427x/STM32F437x devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000598:	b490      	push	{r4, r7}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 80005ac:	79bb      	ldrb	r3, [r7, #6]
 80005ae:	f003 0303 	and.w	r3, r3, #3
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	220f      	movs	r2, #15
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 80005bc:	4916      	ldr	r1, [pc, #88]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005be:	79bb      	ldrb	r3, [r7, #6]
 80005c0:	089b      	lsrs	r3, r3, #2
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	4618      	mov	r0, r3
 80005c6:	4a14      	ldr	r2, [pc, #80]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005c8:	79bb      	ldrb	r3, [r7, #6]
 80005ca:	089b      	lsrs	r3, r3, #2
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	3302      	adds	r3, #2
 80005d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	1c83      	adds	r3, r0, #2
 80005dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 80005e0:	480d      	ldr	r0, [pc, #52]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005e2:	79bb      	ldrb	r3, [r7, #6]
 80005e4:	089b      	lsrs	r3, r3, #2
 80005e6:	b2db      	uxtb	r3, r3
 80005e8:	461c      	mov	r4, r3
 80005ea:	4a0b      	ldr	r2, [pc, #44]	; (8000618 <SYSCFG_EXTILineConfig+0x80>)
 80005ec:	79bb      	ldrb	r3, [r7, #6]
 80005ee:	089b      	lsrs	r3, r3, #2
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	3302      	adds	r3, #2
 80005f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80005f8:	79f9      	ldrb	r1, [r7, #7]
 80005fa:	79bb      	ldrb	r3, [r7, #6]
 80005fc:	f003 0303 	and.w	r3, r3, #3
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa01 f303 	lsl.w	r3, r1, r3
 8000606:	431a      	orrs	r2, r3
 8000608:	1ca3      	adds	r3, r4, #2
 800060a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800060e:	bf00      	nop
 8000610:	3710      	adds	r7, #16
 8000612:	46bd      	mov	sp, r7
 8000614:	bc90      	pop	{r4, r7}
 8000616:	4770      	bx	lr
 8000618:	40013800 	.word	0x40013800

0800061c <_Z14Configure_PB12v>:
#include "stm32f4xx.h"
#include "stm32f4xx_exti.h"
#include "stm32f4xx_syscfg.h"
#include "misc.h"

void Configure_PB12(void) {
 800061c:	b580      	push	{r7, lr}
 800061e:	b086      	sub	sp, #24
 8000620:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct;
	EXTI_InitTypeDef EXTI_InitStruct;
	NVIC_InitTypeDef NVIC_InitStruct;

	/* Enable clock for GPIOB */
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
 8000622:	2101      	movs	r1, #1
 8000624:	2002      	movs	r0, #2
 8000626:	f7ff ff77 	bl	8000518 <RCC_AHB1PeriphClockCmd>
	/* Enable clock for SYSCFG */
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 800062a:	2101      	movs	r1, #1
 800062c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000630:	f7ff ff92 	bl	8000558 <RCC_APB2PeriphClockCmd>

	/* Set pin as input */
	GPIO_InitStruct.GPIO_Mode = GPIO_Mode_IN;
 8000634:	2300      	movs	r3, #0
 8000636:	753b      	strb	r3, [r7, #20]
	GPIO_InitStruct.GPIO_OType = GPIO_OType_PP;
 8000638:	2300      	movs	r3, #0
 800063a:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStruct.GPIO_Pin = GPIO_Pin_12;
 800063c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000640:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.GPIO_PuPd = GPIO_PuPd_DOWN;
 8000642:	2302      	movs	r3, #2
 8000644:	75fb      	strb	r3, [r7, #23]
	GPIO_InitStruct.GPIO_Speed = GPIO_Speed_100MHz;
 8000646:	2303      	movs	r3, #3
 8000648:	757b      	strb	r3, [r7, #21]
	GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 0310 	add.w	r3, r7, #16
 800064e:	4619      	mov	r1, r3
 8000650:	4812      	ldr	r0, [pc, #72]	; (800069c <_Z14Configure_PB12v+0x80>)
 8000652:	f7ff fec1 	bl	80003d8 <GPIO_Init>

	/* Tell system that you will use PB12 for EXTI_Line12 */
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource12);
 8000656:	210c      	movs	r1, #12
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ff9d 	bl	8000598 <SYSCFG_EXTILineConfig>

	/* PB12 is connected to EXTI_Line12 */
	EXTI_InitStruct.EXTI_Line = EXTI_Line12;
 800065e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000662:	60bb      	str	r3, [r7, #8]
	/* Enable interrupt */
	EXTI_InitStruct.EXTI_LineCmd = ENABLE;
 8000664:	2301      	movs	r3, #1
 8000666:	73bb      	strb	r3, [r7, #14]
	/* Interrupt mode */
	EXTI_InitStruct.EXTI_Mode = EXTI_Mode_Interrupt;
 8000668:	2300      	movs	r3, #0
 800066a:	733b      	strb	r3, [r7, #12]
	/* Triggers on rising edge */
	EXTI_InitStruct.EXTI_Trigger = EXTI_Trigger_Rising;
 800066c:	2308      	movs	r3, #8
 800066e:	737b      	strb	r3, [r7, #13]
	/* Add to EXTI */
	EXTI_Init(&EXTI_InitStruct);
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	4618      	mov	r0, r3
 8000676:	f7ff fe09 	bl	800028c <EXTI_Init>

	/* Add IRQ vector to NVIC */
	/* PB12 is connected to EXTI_Line12, which has EXTI15_10_IRQn vector */
	NVIC_InitStruct.NVIC_IRQChannel = EXTI15_10_IRQn;
 800067a:	2328      	movs	r3, #40	; 0x28
 800067c:	713b      	strb	r3, [r7, #4]
	/* Set priority */
	NVIC_InitStruct.NVIC_IRQChannelPreemptionPriority = 0x00;
 800067e:	2300      	movs	r3, #0
 8000680:	717b      	strb	r3, [r7, #5]
	/* Set sub priority */
	NVIC_InitStruct.NVIC_IRQChannelSubPriority = 0x01;
 8000682:	2301      	movs	r3, #1
 8000684:	71bb      	strb	r3, [r7, #6]
	/* Enable interrupt */
	NVIC_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 8000686:	2301      	movs	r3, #1
 8000688:	71fb      	strb	r3, [r7, #7]
	/* Add to NVIC */
	NVIC_Init(&NVIC_InitStruct);
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff fd9b 	bl	80001c8 <NVIC_Init>
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40020400 	.word	0x40020400

080006a0 <EXTI15_10_IRQHandler>:

/* Handle PB12 interrupt */
extern "C" void EXTI15_10_IRQHandler(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* Make sure that interrupt flag is set */
	if (EXTI_GetITStatus(EXTI_Line12) != RESET) {
 80006a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006a8:	f7ff fe62 	bl	8000370 <EXTI_GetITStatus>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	bf14      	ite	ne
 80006b2:	2301      	movne	r3, #1
 80006b4:	2300      	moveq	r3, #0
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d008      	beq.n	80006ce <EXTI15_10_IRQHandler+0x2e>
		/* Do your stuff when PB12 is changed */

		GPIO_ToggleBits(GPIOD, GPIO_Pin_13);
 80006bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <EXTI15_10_IRQHandler+0x34>)
 80006c2:	f7ff ff17 	bl	80004f4 <GPIO_ToggleBits>
		/* Clear interrupt flag */
		EXTI_ClearITPendingBit(EXTI_Line12);
 80006c6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80006ca:	f7ff fe75 	bl	80003b8 <EXTI_ClearITPendingBit>
	}
}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	40020c00 	.word	0x40020c00

080006d8 <_Z7initLEDv>:

void initLED(void) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD,ENABLE);
 80006de:	2101      	movs	r1, #1
 80006e0:	2008      	movs	r0, #8
 80006e2:	f7ff ff19 	bl	8000518 <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef initStruct;
	initStruct.GPIO_Pin = GPIO_Pin_13;
 80006e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ea:	603b      	str	r3, [r7, #0]
	initStruct.GPIO_Mode = GPIO_Mode_OUT;
 80006ec:	2301      	movs	r3, #1
 80006ee:	713b      	strb	r3, [r7, #4]
	initStruct.GPIO_OType = GPIO_OType_PP;
 80006f0:	2300      	movs	r3, #0
 80006f2:	71bb      	strb	r3, [r7, #6]
	initStruct.GPIO_PuPd = GPIO_PuPd_UP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	71fb      	strb	r3, [r7, #7]
	initStruct.GPIO_Speed = GPIO_Speed_50MHz;
 80006f8:	2302      	movs	r3, #2
 80006fa:	717b      	strb	r3, [r7, #5]
	GPIO_Init(GPIOD,&initStruct);
 80006fc:	463b      	mov	r3, r7
 80006fe:	4619      	mov	r1, r3
 8000700:	4803      	ldr	r0, [pc, #12]	; (8000710 <_Z7initLEDv+0x38>)
 8000702:	f7ff fe69 	bl	80003d8 <GPIO_Init>

	return;
 8000706:	bf00      	nop

}
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40020c00 	.word	0x40020c00

08000714 <main>:

int main(void) {
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0

	Configure_PB12();
 8000718:	f7ff ff80 	bl	800061c <_Z14Configure_PB12v>
	initLED();
 800071c:	f7ff ffdc 	bl	80006d8 <_Z7initLEDv>
	while (1) {
 8000720:	e7fe      	b.n	8000720 <main+0xc>
 8000722:	bf00      	nop

08000724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000724:	f8df d034 	ldr.w	sp, [pc, #52]	; 800075c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000728:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800072a:	e003      	b.n	8000734 <LoopCopyDataInit>

0800072c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800072e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000730:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000732:	3104      	adds	r1, #4

08000734 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000736:	4b0c      	ldr	r3, [pc, #48]	; (8000768 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000738:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800073a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800073c:	d3f6      	bcc.n	800072c <CopyDataInit>
  ldr  r2, =_sbss
 800073e:	4a0b      	ldr	r2, [pc, #44]	; (800076c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000740:	e002      	b.n	8000748 <LoopFillZerobss>

08000742 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000742:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000744:	f842 3b04 	str.w	r3, [r2], #4

08000748 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000748:	4b09      	ldr	r3, [pc, #36]	; (8000770 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800074a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800074c:	d3f9      	bcc.n	8000742 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800074e:	f000 f84b 	bl	80007e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000752:	f000 f8fb 	bl	800094c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000756:	f7ff ffdd 	bl	8000714 <main>
  bx  lr    
 800075a:	4770      	bx	lr

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800075c:	20020000 	.word	0x20020000
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
  b  LoopCopyDataInit

CopyDataInit:
  ldr  r3, =_sidata
 8000760:	080009b8 	.word	0x080009b8
  ldr  r3, [r3, r1]
  str  r3, [r0, r1]
  adds  r1, r1, #4
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000764:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000768:	20000000 	.word	0x20000000
  adds  r2, r0, r1
  cmp  r2, r3
  bcc  CopyDataInit
  ldr  r2, =_sbss
 800076c:	20000000 	.word	0x20000000
FillZerobss:
  movs  r3, #0
  str  r3, [r2], #4
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000770:	2000001c 	.word	0x2000001c

08000774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000774:	e7fe      	b.n	8000774 <ADC_IRQHandler>
	...

08000778 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop

08000788 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 800078c:	e7fe      	b.n	800078c <HardFault_Handler+0x4>
 800078e:	bf00      	nop

08000790 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000794:	e7fe      	b.n	8000794 <MemManage_Handler+0x4>
 8000796:	bf00      	nop

08000798 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 800079c:	e7fe      	b.n	800079c <BusFault_Handler+0x4>
 800079e:	bf00      	nop

080007a0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 80007a4:	e7fe      	b.n	80007a4 <UsageFault_Handler+0x4>
 80007a6:	bf00      	nop

080007a8 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
}
 80007bc:	bf00      	nop
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop

080007c8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop

080007d8 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007ec:	4a16      	ldr	r2, [pc, #88]	; (8000848 <SystemInit+0x60>)
 80007ee:	4b16      	ldr	r3, [pc, #88]	; (8000848 <SystemInit+0x60>)
 80007f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <SystemInit+0x64>)
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <SystemInit+0x64>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000808:	4b10      	ldr	r3, [pc, #64]	; (800084c <SystemInit+0x64>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <SystemInit+0x64>)
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <SystemInit+0x64>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000818:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800081c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <SystemInit+0x64>)
 8000820:	4a0b      	ldr	r2, [pc, #44]	; (8000850 <SystemInit+0x68>)
 8000822:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000824:	4a09      	ldr	r2, [pc, #36]	; (800084c <SystemInit+0x64>)
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <SystemInit+0x64>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800082e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <SystemInit+0x64>)
 8000832:	2200      	movs	r2, #0
 8000834:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8000836:	f000 f80d 	bl	8000854 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <SystemInit+0x60>)
 800083c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000840:	609a      	str	r2, [r3, #8]
#endif
}
 8000842:	bf00      	nop
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00
 800084c:	40023800 	.word	0x40023800
 8000850:	24003010 	.word	0x24003010

08000854 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000854:	b480      	push	{r7}
 8000856:	b083      	sub	sp, #12
 8000858:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000862:	4a36      	ldr	r2, [pc, #216]	; (800093c <SetSysClock+0xe8>)
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <SetSysClock+0xe8>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800086c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800086e:	4b33      	ldr	r3, [pc, #204]	; (800093c <SetSysClock+0xe8>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000876:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	3301      	adds	r3, #1
 800087c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d103      	bne.n	800088c <SetSysClock+0x38>
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800088a:	d1f0      	bne.n	800086e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 800088c:	4b2b      	ldr	r3, [pc, #172]	; (800093c <SetSysClock+0xe8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000894:	2b00      	cmp	r3, #0
 8000896:	d002      	beq.n	800089e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000898:	2301      	movs	r3, #1
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	e001      	b.n	80008a2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800089e:	2300      	movs	r3, #0
 80008a0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d142      	bne.n	800092e <SetSysClock+0xda>
  {
    /* Select regulator voltage output Scale 1 mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80008a8:	4a24      	ldr	r2, [pc, #144]	; (800093c <SetSysClock+0xe8>)
 80008aa:	4b24      	ldr	r3, [pc, #144]	; (800093c <SetSysClock+0xe8>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80008b4:	4a22      	ldr	r2, [pc, #136]	; (8000940 <SetSysClock+0xec>)
 80008b6:	4b22      	ldr	r3, [pc, #136]	; (8000940 <SetSysClock+0xec>)
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008be:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80008c0:	4a1e      	ldr	r2, [pc, #120]	; (800093c <SetSysClock+0xe8>)
 80008c2:	4b1e      	ldr	r3, [pc, #120]	; (800093c <SetSysClock+0xe8>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80008c8:	4a1c      	ldr	r2, [pc, #112]	; (800093c <SetSysClock+0xe8>)
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <SetSysClock+0xe8>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80008d2:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <SetSysClock+0xe8>)
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <SetSysClock+0xe8>)
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80008de:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <SetSysClock+0xe8>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <SetSysClock+0xf0>)
 80008e4:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80008e6:	4a15      	ldr	r2, [pc, #84]	; (800093c <SetSysClock+0xe8>)
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <SetSysClock+0xe8>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80008f0:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80008f2:	bf00      	nop
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <SetSysClock+0xe8>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0f9      	beq.n	80008f4 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN |FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8000900:	4b11      	ldr	r3, [pc, #68]	; (8000948 <SetSysClock+0xf4>)
 8000902:	f240 7205 	movw	r2, #1797	; 0x705
 8000906:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000908:	4a0c      	ldr	r2, [pc, #48]	; (800093c <SetSysClock+0xe8>)
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <SetSysClock+0xe8>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	f023 0303 	bic.w	r3, r3, #3
 8000912:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8000914:	4a09      	ldr	r2, [pc, #36]	; (800093c <SetSysClock+0xe8>)
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <SetSysClock+0xe8>)
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	f043 0302 	orr.w	r3, r3, #2
 800091e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8000920:	bf00      	nop
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <SetSysClock+0xe8>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	f003 030c 	and.w	r3, r3, #12
 800092a:	2b08      	cmp	r3, #8
 800092c:	d1f9      	bne.n	8000922 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800
 8000940:	40007000 	.word	0x40007000
 8000944:	07405419 	.word	0x07405419
 8000948:	40023c00 	.word	0x40023c00

0800094c <__libc_init_array>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	4b0e      	ldr	r3, [pc, #56]	; (8000988 <__libc_init_array+0x3c>)
 8000950:	4c0e      	ldr	r4, [pc, #56]	; (800098c <__libc_init_array+0x40>)
 8000952:	1ae4      	subs	r4, r4, r3
 8000954:	10a4      	asrs	r4, r4, #2
 8000956:	2500      	movs	r5, #0
 8000958:	461e      	mov	r6, r3
 800095a:	42a5      	cmp	r5, r4
 800095c:	d004      	beq.n	8000968 <__libc_init_array+0x1c>
 800095e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000962:	4798      	blx	r3
 8000964:	3501      	adds	r5, #1
 8000966:	e7f8      	b.n	800095a <__libc_init_array+0xe>
 8000968:	f000 f816 	bl	8000998 <_init>
 800096c:	4c08      	ldr	r4, [pc, #32]	; (8000990 <__libc_init_array+0x44>)
 800096e:	4b09      	ldr	r3, [pc, #36]	; (8000994 <__libc_init_array+0x48>)
 8000970:	1ae4      	subs	r4, r4, r3
 8000972:	10a4      	asrs	r4, r4, #2
 8000974:	2500      	movs	r5, #0
 8000976:	461e      	mov	r6, r3
 8000978:	42a5      	cmp	r5, r4
 800097a:	d004      	beq.n	8000986 <__libc_init_array+0x3a>
 800097c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000980:	4798      	blx	r3
 8000982:	3501      	adds	r5, #1
 8000984:	e7f8      	b.n	8000978 <__libc_init_array+0x2c>
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	080009b0 	.word	0x080009b0
 800098c:	080009b0 	.word	0x080009b0
 8000990:	080009b4 	.word	0x080009b4
 8000994:	080009b0 	.word	0x080009b0

08000998 <_init>:
 8000998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800099a:	bf00      	nop
 800099c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800099e:	bc08      	pop	{r3}
 80009a0:	469e      	mov	lr, r3
 80009a2:	4770      	bx	lr

080009a4 <_fini>:
 80009a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a6:	bf00      	nop
 80009a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009aa:	bc08      	pop	{r3}
 80009ac:	469e      	mov	lr, r3
 80009ae:	4770      	bx	lr
